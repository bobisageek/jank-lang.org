#!/usr/bin/env bash

set -euo pipefail

generated_dir="resources/generated/html"

function resource-type
{
  case "${1}"
  in
    clj | jank)
      echo "clojure"
      ;;
    hpp | cpp)
      echo "cpp"
      ;;
    md)
      echo "markdown"
      ;;
    *)
      echo "sh"
  esac
}

# $1 = file
# $2 = resource type
# $3 = file sans extension
function render
{
  local file resource_type file_sans_ext
  file="$1"
  resource_type="$2"
  file_sans_ext="$3"
  case "${1}"
  in
    markdown)
      ;;
    *)
      ./bin/highlight "${file}" "${resource_type}" > "${generated_dir}/${file_sans_ext}.html"
      ;;
  esac
}

function main
{
  /bin/rm -rf "${generated_dir}"
  /bin/mkdir -p "${generated_dir}"

  local resource_files
  resource_files="$(find resources/src -type f)"
  for file in $resource_files;
  do
    local base_file file_sans_ext ext
    base_file="${file##resources/src/}"
    file_sans_ext="${base_file%.*}"
    ext="${base_file##*.}"
    mkdir -p "$(dirname "${generated_dir}/${file_sans_ext}")"
    render "${file}" "$(resource-type "${ext}")" "${file_sans_ext}"

    printf "\r$(tput el)Generating %s â€¦" "${base_file}"
  done
  printf "\r"
}
main
